CREATE OR REPLACE PROCEDURE PROC_RDM_YSX_LIMIT_RES
(
	IN DATA_DATE	VARCHAR(10)
	,IN RUN_TIMES	INTEGER
	,IN BASE_LIMIT  INTEGER         --基础额度参数，可直接定义授信基础额度;若为0则为当前普通贷款客户平均额度作为基础额度;
)
LANGUAGE SQL
/**********************************************************************************************************************/
--依赖源表:  DDS_IND_CUST_EXPD_ECIF				对私客户扩展信息表
--依赖源表:  DDS_IND_FMY_INFO				    家庭信息表
--依赖源表:  DDS_CUST_CREDIT_CHECKS				征信结果纳入信贷流程
--依赖源表:  DDS_BLFMPMIN				        贷款利息文件
--依赖源表:  DDS_ACCT				            信用卡账户附加信息
--依赖源表:  SDS_CRDT_CARD_INFO_M				信用卡卡信息月表
--依赖源表:  SDS_LOAN_DUBIL_INFO_M				借记卡卡信息月表
--依赖源表:  SDS_INDV_CUST_BASE_INFO_M			个人客户基本信息月表
--依赖源表： SDS_CURR_DEPO_ACCT_M               活期存款账户表
--依赖源表： ADS_DEBIT_CARD_INFO                借记卡卡信息表
--依赖源表： ADS_CRDT_CARD_ACCT                 信用卡账户信息表
--依赖源表:  SDS_CRDT_CARD_ACCT_M				信用卡账户月表
--依赖源表:  ADS_CUST_SIGN		                客户签约表
--依赖源表:  ADS_DEPO_TRAN_LIST	                存款交易流水表
--目标表：   RDM_YSX_LIMIT_RES		 	    个人客户交易汇总表
--加载策略：每月 手动执行
--调用示例：CALL PROC_RDM_YSX_LIMIT_RES('2013-01-01',0,0)
/**********************************************************************************************************************/
BEGIN

	--定义变量
	DECLARE SQLCODE INTEGER DEFAULT 0;                  --系统变量
	DECLARE SQLSTATE CHAR(5) DEFAULT '00000';           --系统变量
	DECLARE V_SQL_CODE INTEGER DEFAULT 0;               --自定义系统变量
	DECLARE V_SQL_STATE VARCHAR(5) DEFAULT '00000';     --自定义系统变量
	DECLARE V_ERR_TIME TIMESTAMP;                       --存储过程运行的系统时间戳
	DECLARE V_ERR_STR VARCHAR(50);                      --错误信息
	DECLARE V_PROC_NAME VARCHAR(50);                    --存储过程名称
	DECLARE V_LOAD_DATE DATE;                           --存储过程运行系统日期
	DECLARE V_DATA_DATE DATE;                           --存储过程执行的日期参数
	DECLARE V_MIN_DATE DATE;                            --最小日期,默认1899-12-31
	DECLARE V_MAX_DATE DATE;                            --最大日期,默认9999-12-31
	DECLARE V_START_DATE DATE;                          --贷记卡交易最大日期
	DECLARE V_LAST_DATE DATE;                           --存储过程执行日期的上一天
	DECLARE V_LAST_Y_DATE DATE;                           --去年（前12个月）
	DECLARE V_LAST_MTH_DATE DATE;                   	--上月末
	DECLARE V_FTD_END_DATE DATE;                        --上旬结束日期
	DECLARE V_MTD_START_DATE DATE;                      --中旬开始日期
	DECLARE V_MTD_END_DATE DATE;                        --中旬结束日期
	DECLARE V_LTD_START_DATE DATE;                      --下旬开始日期
	DECLARE V_Y_START_DATE DATE;                        --年初日期
	DECLARE V_M_START_DATE DATE;                        --月初日期
	DECLARE V_STMT VARCHAR(3000);                       --清空表中数据
	DECLARE V_LAST_Y_NEXT_START_M DATE;					--去年本月下月初
	DECLARE V_LAST_HELF_Y_NEXT_START_M DATE;			--半年前本月下月初
	DECLARE V_LAST_DATE_3M DATE;			            --3月之前月初
	DECLARE V_LAST_DATE_6M DATE;			            --6月之前月初
	DECLARE V_LAST_DATE_9M DATE;			            --9月之前月初

	--异常处理
	DECLARE CONTINUE HANDLER FOR SQLWARNING, NOT FOUND
	BEGIN
	END;
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN

		--保存异常代码
		SET V_ERR_STR = REPLACE(CHAR(SQLCODE), ' ', '') || ':' || SQLSTATE;
		SET V_SQL_CODE = INT(SUBSTR(V_ERR_STR, 1, POSSTR(V_ERR_STR, ':') - 1));
		SET V_SQL_STATE = SUBSTR(V_ERR_STR, POSSTR(V_ERR_STR, ':') + 1);

		--回滚之前的所有操作
		ROLLBACK;

		--将异常代码记录到日志表中
		INSERT INTO ETL_ERRLOG_INFO
		(
			PROC_NAME
			,LOAD_DATE
			,ERR_TIME
			,SQL_CODE
			,SQL_STATE
		)
		VALUES
		(
			V_PROC_NAME
			,V_DATA_DATE
			,V_ERR_TIME
			,V_SQL_CODE
			,V_SQL_STATE
		)
		;

		COMMIT;

		--抛出错误值99999
		SIGNAL SQLSTATE '99999';

	END;

	--变量赋值
	SET V_PROC_NAME = 'PROC_RDM_YSX_LIMIT_RES';
	VALUES CURRENT TIMESTAMP INTO V_ERR_TIME;
	SET V_LOAD_DATE = DATE(V_ERR_TIME);
	SET V_MIN_DATE = DATE('1899-12-31');
	SET V_MAX_DATE = DATE('9999-12-31');
	SET V_START_DATE = DATE('2013-11-30');
	SET V_DATA_DATE = TO_DATE(DATA_DATE, 'YYYY-MM-DD');
	SET V_LAST_DATE = V_DATA_DATE - 1 DAY;
	SET V_LAST_Y_DATE = V_DATA_DATE + 1 DAY - 1 YEAR;
	SET V_LAST_MTH_DATE = TO_DATE(TO_CHAR(V_DATA_DATE, 'YYYYMM') || '01', 'YYYYMMDD') - 1 DAY;
	SET V_FTD_END_DATE = TO_DATE(TO_CHAR(V_DATA_DATE, 'YYYYMM') || '10', 'YYYYMMDD');
	SET V_MTD_START_DATE = TO_DATE(TO_CHAR(V_DATA_DATE, 'YYYYMM') || '11', 'YYYYMMDD');
	SET V_MTD_END_DATE = TO_DATE(TO_CHAR(V_DATA_DATE, 'YYYYMM') || '20', 'YYYYMMDD');
	SET V_LTD_START_DATE = TO_DATE(TO_CHAR(V_DATA_DATE, 'YYYYMM') || '21', 'YYYYMMDD');
	SET V_Y_START_DATE = TO_DATE(TO_CHAR(V_DATA_DATE, 'YYYY') || '0101', 'YYYYMMDD');
	SET V_M_START_DATE = TO_DATE(TO_CHAR(V_DATA_DATE, 'YYYYMM') || '01', 'YYYYMMDD');
	SET V_LAST_Y_NEXT_START_M = DATE(V_DATA_DATE) + 1 DAY - 1 YEAR;
	SET V_LAST_HELF_Y_NEXT_START_M= V_DATA_DATE + 1 DAY - 6 MONTH ;
	SET V_LAST_DATE_3M = V_DATA_DATE + 1 DAY - 3 MONTH;
	SET V_LAST_DATE_6M = V_DATA_DATE + 1 DAY - 6 MONTH;
	SET V_LAST_DATE_9M = V_DATA_DATE + 1 DAY - 9 MONTH;

	--运行策略:删除插入
	DELETE FROM RDM_YSX_LIMIT_RES WHERE DATE_ID = V_DATA_DATE;

	DECLARE GLOBAL TEMPORARY TABLE SESSION.CUST_DQ_INFO(
	CUST_ID VARCHAR(23)
	)ON COMMIT PRESERVE ROWS
	NOT LOGGED
	WITH REPLACE
	IN RIAP_UTMP4K1;

	INSERT INTO SESSION.CUST_DQ_INFO
	SELECT
	  DISTINCT A1.CUST_ID
	FROM
	(
	  SELECT
		 CUST_ID
	  FROM SDS_INDV_CUST_BASE_INFO_M
	  WHERE STAT_DT = V_DATA_DATE  AND SUBSTR(TRIM(CUST_ID),1,9)='101330521'
	  GROUP BY CUST_ID
--	  UNION
--	  SELECT
--		 DISTINCT(C2.CUST_ID)
--	  FROM DDS_BCFMCADI C1
--	  INNER JOIN ADS_CUST_INNER_MAPP_H C2
--	  ON C1.CINOCSNO = C2.CUST_INNER_ID AND C2.VALID_FROM_DT <= V_DATA_DATE AND C2.VALID_TO_DT > V_DATA_DATE
--	  WHERE C1.VALID_FROM_DT <= V_DATA_DATE
--	  AND C1.VALID_TO_DT > V_DATA_DATE
--	  AND (C1.ADI1ADDR LIKE '%德清%' OR C1.ADI2ADDR LIKE '%德清%')
--	  GROUP BY C2.CUST_ID
	) A1 --德清人
	LEFT JOIN
	(
	  SELECT
		 CUST_ID
		,CASE WHEN BIRTH_DT='9999-12-31' THEN 999 ELSE INT((DAYS(V_DATA_DATE)-DAYS(BIRTH_DT))/365) END AS AGE
	  FROM SDS_INDV_CUST_BASE_INFO_M
	  WHERE LOAN_FLG=0
	  AND BLK_FLG=0
	  AND STAT_DT = V_DATA_DATE
	) A2
	ON A1.CUST_ID = A2.CUST_ID
	LEFT JOIN MDL_INDV_LOAN_APP_CUSTR_INFO A3
	ON A1.CUST_ID=A3.CUST_ID
	LEFT JOIN MDL_INDV_CRDT_RISK_INFO A4
	ON A1.CUST_ID=A4.CUST_ID AND A4.DATE_ID=V_DATA_DATE

	WHERE A3.LOAN_APP_SCORE >= 400 AND A4.CRDT_SCORE >= 300        ----个人征信评分大于300和小贷预评分大于400分
	  AND A2.AGE >20 AND A2.AGE <=55                               ----年龄在20-55之间
	  AND A1.CUST_ID NOT IN                                        ----剔除福农卡客户
		(SELECT DISTINCT CUST_ID FROM SDS_CRDT_CARD_INFO_M
		 WHERE STAT_DT=V_DATA_DATE AND CARD_PRD_CD='1210180004')
	  AND A1.CUST_ID NOT IN                                        ----剔除当前有效合同客户
		(SELECT DISTINCT CUST_ID FROM ADS_LOAN_CONTR_INFO
		 WHERE MATURE_DT>=V_DATA_DATE AND CONTR_LIMIT>0)
	  AND A1.CUST_ID NOT IN                                        ----剔除薪享贷客户
		(SELECT DISTINCT CUST_ID FROM ADS_XXD_CUST_LIST)
	;


	DECLARE GLOBAL TEMPORARY TABLE SESSION.TMP_CUST_YSX_BAL(
		CUST_ID     CHAR(23) NOT NULL,
		CUST_NAME   CHAR(23),
		STAT_DT     DATE,
		SEX_CD      VARCHAR(20),
		EDU_CD      VARCHAR(20),
		AGE         INT,
		CUST_STAR   VARCHAR(10),
		PROD_NUM    INT,
		M12_ACCU_CNSM_AMT DECIMAL(20,2),
		M12_ACCU_DRAW_CNT INT,
		M6_AVG_DEPO_BAL   DECIMAL(20,2),
		AGE_SEG  VARCHAR(20),
		PROD_NUM_SEG  VARCHAR(20),
		M12_ACCU_CNSM_AMT_SEG VARCHAR(20),
		M12_ACCU_DRAW_CNT_SEG  VARCHAR(20),
		M6_AVG_DEPO_BAL_SEG VARCHAR(20),
		CRDT_SCORE  INT,
		LOAN_APP_SCORE INT
	)ON COMMIT PRESERVE ROWS
	NOT LOGGED
	WITH REPLACE
	IN RIAP_UTMP4K1;

	INSERT INTO SESSION.TMP_CUST_YSX_BAL
	(
		CUST_ID
		,CUST_NAME
		,STAT_DT
		,SEX_CD
		,EDU_CD
		,AGE
		,CUST_STAR
		,PROD_NUM
		,M12_ACCU_CNSM_AMT
		,M12_ACCU_DRAW_CNT
		,M6_AVG_DEPO_BAL
		,AGE_SEG
		,PROD_NUM_SEG
		,M12_ACCU_CNSM_AMT_SEG
		,M12_ACCU_DRAW_CNT_SEG
		,M6_AVG_DEPO_BAL_SEG
		,CRDT_SCORE
		,LOAN_APP_SCORE
	)
	SELECT
	  CUST_ID
	  ,CUST_NAME
	  ,STAT_DT
	  ,SEX_CD
	  ,EDU_CD
	  ,AGE
	  ,CUST_STAR
	  ,PROD_NUM
	  ,M12_ACCU_CNSM_AMT
	  ,M12_ACCU_DRAW_CNT
	  ,M6_AVG_DEPO_BAL
	  ,CASE WHEN AGE<=25 THEN '25岁以下'
		  WHEN AGE>25 AND AGE<=35 THEN '25-35岁'
		  WHEN AGE>35 AND AGE<=45 THEN '35-45岁'
		  WHEN AGE>45 AND AGE<=55 THEN '45-55岁'
		  WHEN AGE>55 THEN '55岁以上'
		  WHEN AGE=999 THEN '其他'
		  END AS AGE_SEG
	  ,CASE WHEN PROD_NUM<=4 THEN '01_4种及以下'
		  WHEN PROD_NUM>4 AND PROD_NUM<=8 THEN '02_4-8种'
		  WHEN PROD_NUM>8 THEN '03_8种以上'
		  END AS PROD_NUM_SEG
	  ,CASE WHEN M12_ACCU_CNSM_AMT<50000 THEN '01_5万以下'
		WHEN M12_ACCU_CNSM_AMT>=50000 AND M12_ACCU_CNSM_AMT<100000 THEN '02_5-10万'
		WHEN M12_ACCU_CNSM_AMT>=100000 AND M12_ACCU_CNSM_AMT<200000 THEN '03_10-20万'
		WHEN M12_ACCU_CNSM_AMT>=200000 AND M12_ACCU_CNSM_AMT<300000 THEN '04_20-30万'
		WHEN M12_ACCU_CNSM_AMT>=300000  THEN '05_30万以上'
		END AS M12_ACCU_CNSM_AMT_SEG
	  ,CASE WHEN M12_ACCU_DRAW_CNT=0 THEN '01_没有'
		WHEN M12_ACCU_DRAW_CNT>=1 AND M12_ACCU_DRAW_CNT<3 THEN '02_1-3笔'
		WHEN M12_ACCU_DRAW_CNT>=3 AND M12_ACCU_DRAW_CNT<5 THEN '03_3-5笔'
		WHEN M12_ACCU_DRAW_CNT>=5  THEN '04_5笔以上'
		END AS M12_ACCU_DRAW_CNT_SEG
	  ,CASE WHEN M6_AVG_DEPO_BAL<50000 THEN '01_5万以下'
		WHEN M6_AVG_DEPO_BAL>=50000 AND M6_AVG_DEPO_BAL<100000 THEN '02_5-10万'
		WHEN M6_AVG_DEPO_BAL>=100000 AND M6_AVG_DEPO_BAL<200000 THEN '03_10-20万'
		WHEN M6_AVG_DEPO_BAL>=200000 AND M6_AVG_DEPO_BAL<300000 THEN '04_20-30万'
		WHEN M6_AVG_DEPO_BAL>=300000  THEN '05_30万以上'
		END AS M6_AVG_DEPO_BAL_SEG
	  ,CRDT_SCORE
	  ,LOAN_APP_SCORE
	FROM
	(
	  SELECT
		B1.CUST_ID
		,B2.STAT_DT
		,B2.CUST_NAME
		,CASE WHEN B2.SEX_CD=1 THEN '男' WHEN B2.SEX_CD=2 THEN '女' ELSE '其他' END AS SEX_CD
		,CASE WHEN B2.EDU_CD='1110030001' THEN '初中及以下'
		  WHEN B2.EDU_CD='1110030002' THEN '高中及中专'
		  WHEN B2.EDU_CD='1110030003' THEN '大专'
		  WHEN B2.EDU_CD='1110030004' THEN '本科'
		  WHEN B2.EDU_CD IN ('1110030005','1110030006') THEN '硕士及以上'
		  ELSE  '其他'
		  END AS EDU_CD
		,CASE WHEN B2.BIRTH_DT='9999-12-31' THEN 999 ELSE INT((DAYS(V_DATA_DATE)-DAYS(B2.BIRTH_DT))/365) END AS AGE
		,CASE WHEN B2.CUST_STAR='01' THEN '五星'
		  WHEN B2.CUST_STAR='02' THEN '四星'
		  WHEN B2.CUST_STAR='03' THEN '三星'
		  WHEN B2.CUST_STAR='04' THEN '二星'
		  WHEN B2.CUST_STAR='05' THEN '一星'
		  ELSE '无星'
		  END AS CUST_STAR
		,CASE WHEN B2.CURR_VALID_ACCT_CNT+B2.TIME_VALID_ACCT_CNT>0 THEN 1 ELSE 0 END
			+CASE WHEN B2.CRDT_CARD_VALID_CARD_CNT>0 THEN 1 ELSE 0 END
			+B2.LOAN_FLG
			+CASE WHEN B2.FMS_BAL>0 THEN 1 ELSE 0 END
			+COALESCE(B4.PROD_NUM,0) AS PROD_NUM
		,COALESCE(B3.M12_ACCU_CNSM_AMT,0) AS M12_ACCU_CNSM_AMT
		,COALESCE(B3.M12_ACCU_DRAW_CNT,0) AS M12_ACCU_DRAW_CNT
		,COALESCE(B5.M6_AVG_DEPO_BAL,0) AS M6_AVG_DEPO_BAL
		,COALESCE(B6.CRDT_SCORE,0) AS CRDT_SCORE
		,COALESCE(B7.LOAN_APP_SCORE,0) AS LOAN_APP_SCORE
	  FROM SESSION.CUST_DQ_INFO B1
	  LEFT JOIN SDS_INDV_CUST_BASE_INFO_M B2
	  ON B1.CUST_ID=B2.CUST_ID
	  AND B2.STAT_DT=V_DATA_DATE
	  LEFT JOIN
	  (
		SELECT
			C0.CUST_ID
			,SUM(CASE WHEN C2.ABST_CD  IN ('3104','3140') THEN C2.TRAN_AMT ELSE 0 END) AS M12_ACCU_CNSM_AMT
			,SUM(CASE WHEN C2.ABST_CD  IN ('3122','3167','2106') THEN C2.TRAN_CNT ELSE 0 END) AS M12_ACCU_DRAW_CNT
		FROM SESSION.CUST_DQ_INFO C0
		INNER JOIN SDS_CURR_DEPO_ACCT_M C1
		ON C0.CUST_ID = C1.CUST_ID
		AND C1.STAT_DT BETWEEN V_LAST_Y_DATE AND V_DATA_DATE
		LEFT JOIN ADS_DEPO_TRAN_LIST C2
		ON C1.ACCT_ID = C2.ACCT_ID
		AND C2.TRAN_TYPE_CD IN ('1310011101', '1310011104')
		AND C2.TRAN_DT BETWEEN  C1.STAT_DT - 1 MONTH + 1 DAY AND C1.STAT_DT
		GROUP BY C0.CUST_ID
	  ) B3
	  ON B2.CUST_ID = B3.CUST_ID
	  LEFT JOIN
	  (
       SELECT
			CUST_ID,
			COUNT(DISTINCT SIGN_TYPE_CD) AS PROD_NUM
		FROM ADS_CUST_SIGN
		WHERE SIGN_DATE <= V_DATA_DATE AND STAT='1'
		GROUP BY CUST_ID
	  ) B4
	  ON B2.CUST_ID=B4.CUST_ID
	  LEFT JOIN
	  (
	  SELECT
		CUST_ID
		,SUM(M_AVG_CURR_DEPO_BAL)/6.0 AS M6_AVG_DEPO_BAL
	  FROM SDS_INDV_CUST_BASE_INFO_M
	  WHERE STAT_DT BETWEEN V_LAST_DATE_6M AND V_DATA_DATE
	  GROUP BY CUST_ID
	  ) B5
	  ON B2.CUST_ID=B5.CUST_ID
	  LEFT JOIN MDL_INDV_CRDT_RISK_INFO B6
	  ON B2.CUST_ID=B6.CUST_ID
	  AND B6.DATE_ID=V_DATA_DATE
	  LEFT JOIN MDL_INDV_LOAN_APP_CUSTR_INFO B7
	  ON B2.CUST_ID=B7.CUST_ID
	)
;


	INSERT INTO RDM_YSX_LIMIT_RES
	(
		DATE_ID
		,CUST_ID
		,CUST_NAME
		,CRDT_SCORE
		,LOAN_APP_SCORE
		,SEX_CD
		,EDU_CD
		,AGE
		,CUST_STAR
		,PROD_NUM
		,M12_ACCU_CNSM_AMT
		,M12_ACCU_DRAW_CNT
		,M6_AVG_DEPO_BAL
		,CRDT_LIMIT
	)
	SELECT
		V_DATA_DATE AS DATE_ID
		,CUST_ID
		,CUST_NAME
		,CRDT_SCORE
		,LOAN_APP_SCORE
		,SEX_CD
		,EDU_CD
		,AGE
		,CUST_STAR
		,PROD_NUM
		,M12_ACCU_CNSM_AMT
		,M12_ACCU_DRAW_CNT
		,M6_AVG_DEPO_BAL
--	  ,CASE WHEN LOAN_SCORE_NUM='200以下' THEN '拒绝'
--		WHEN LOAN_SCORE_NUM='700以上' AND CRDT_SCORE_NUM='600以上' THEN '通过'
--		ELSE '关注'
--		END AS PASS_FLG
	  ,CAST(ROUND(CASE WHEN BAL>100000 THEN 100000 ELSE BAL END,-3) AS INT) AS CRDT_LIMIT
	FROM
	(
	  SELECT
		CUST_ID
		,TRIM(CUST_NAME) AS CUST_NAME
		,CRDT_SCORE
		,LOAN_APP_SCORE
		,SEX_CD
		,EDU_CD
		,AGE
		,CUST_STAR
		,PROD_NUM
		,M12_ACCU_CNSM_AMT
		,M12_ACCU_DRAW_CNT
		,M6_AVG_DEPO_BAL
--		,CASE WHEN LOAN_APP_SCORE<=200 THEN '200分以下'
--		  WHEN LOAN_APP_SCORE>200 AND LOAN_APP_SCORE<=700 THEN '200-700分'
--		  WHEN LOAN_APP_SCORE>700 THEN '700分以上'
--		  END AS LOAN_SCORE_NUM
--		,CASE WHEN CRDT_SCORE<=200 THEN '200分以下'
--		  WHEN CRDT_SCORE>200 AND CRDT_SCORE<=600 THEN '200-600分'
--		  WHEN CRDT_SCORE>600 THEN '600以上'
--		  END AS CRDT_SCORE_NUM
		,CASE
			WHEN BASE_LIMIT = 0
			THEN AVG_LIMIT*SEX_INT*EDU_INT*AGE_INT*STAR_INT*PROD_INT*CNSM_INT*DRAW_INT*DEPO_INT
			ELSE BASE_LIMIT*SEX_INT*EDU_INT*AGE_INT*STAR_INT*PROD_INT*CNSM_INT*DRAW_INT*DEPO_INT
		END AS BAL
	  FROM
	  (
		SELECT
		  B1.CUST_ID
		  ,B1.CUST_NAME
		  ,MAX(CRDT_SCORE) AS CRDT_SCORE
		  ,MAX(LOAN_APP_SCORE) AS LOAN_APP_SCORE
		  ,MAX(SEX_CD) AS SEX_CD
		  ,MAX(EDU_CD) AS EDU_CD
		  ,MAX(AGE) AS AGE
		  ,MAX(CUST_STAR) AS  CUST_STAR
		  ,MAX(PROD_NUM) AS  PROD_NUM
		  ,MAX(M12_ACCU_CNSM_AMT) AS  M12_ACCU_CNSM_AMT
		  ,MAX(M12_ACCU_DRAW_CNT) AS  M12_ACCU_DRAW_CNT
		  ,MAX(M6_AVG_DEPO_BAL) AS M6_AVG_DEPO_BAL
		  ,MAX(CASE WHEN B1.SEX_CD=B2.VAR_SEG THEN VAR_COEF END) AS SEX_INT
		  ,MAX(CASE WHEN B1.EDU_CD=B2.VAR_SEG THEN VAR_COEF END) AS EDU_INT
		  ,MAX(CASE WHEN B1.AGE_SEG=B2.VAR_SEG THEN VAR_COEF END) AS AGE_INT
		  ,MAX(CASE WHEN B1.CUST_STAR=B2.VAR_SEG THEN VAR_COEF END) AS STAR_INT
		  ,MAX(CASE WHEN B1.PROD_NUM_SEG=B2.VAR_SEG THEN VAR_COEF END) AS PROD_INT
		  ,MAX(CASE WHEN B1.M12_ACCU_CNSM_AMT_SEG=B2.VAR_SEG THEN VAR_COEF END) AS CNSM_INT
		  ,MAX(CASE WHEN B1.M12_ACCU_DRAW_CNT_SEG=B2.VAR_SEG THEN VAR_COEF END) AS DRAW_INT
		  ,MAX(CASE WHEN B1.M6_AVG_DEPO_BAL_SEG=B2.VAR_SEG THEN VAR_COEF END) AS DEPO_INT
		  ,MAX(B2.AVG_LIMIT) AS AVG_LIMIT
		FROM SESSION.TMP_CUST_YSX_BAL B1
		LEFT JOIN RDM_YSX_MODEL_INFO B2
		ON B2.STAT_DT = V_DATA_DATE
		WHERE B1.STAT_DT=V_DATA_DATE
		GROUP BY B1.CUST_ID,B1.CUST_NAME
	  )
	)
	;


 	--正常运行,全部提交
	COMMIT;

END;



